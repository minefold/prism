#!/usr/bin/env ruby
# encoding: UTF-8
require 'bundler/setup'
Bundler.require :default, :sauron
require 'json'
require 'colored'

db = Redis.new :host => '0.0.0.0', :port => 6379

# Danger, Will Robinson!
db.flushall

%w{chrislloyd whatupdave}.each do |username|
  db.set "player.#{username}.world", 'alpha'
end

module ProxyHandler
  attr_accessor :foreman

  def receive_data data
    request = JSON.parse(data)

    puts "proxy -> #{request.inspect.bold} -> sauron"

    foreman.send_data [:start, request[1]].to_json
    EM.next_tick { foreman.notify_readable}
    # resp = {:world => 'foo', :host => 'localhost', :port => 3000}

    # send_data resp.to_json
  end

  def send_data data
    puts "sauron -> #{data.inspect.bold} -> proxy"
    super data
  end

end

module ForemanHandler
  attr_accessor :proxy
  def receive_data data
    request = JSON.parse(data)

    puts "foreman -> #{request.inspect.bold} -> sauron"

    host, port = request

    proxy.send_data({:host => host, :port => port}.to_json)
  end

  def send_data data
    puts "sauron -> #{data.inspect.bold} -> foreman"
    super data
  end

end


EM.run do
  ctx = EventMachine::ZMQ::Context.new
  foreman = ctx.bind :req, 'ipc:///tmp/sauron-to-foreman', ForemanHandler
  proxy = ctx.connect :rep, 'ipc:///tmp/proxy-to-sauron', ProxyHandler do |p|
    p.foreman = foreman
    foreman.proxy = p
  end
end

# Recieve a message from the proxy, "Where the hell is Alpha?"

# Select the most appropiate foreman.

# Send a message to Foreman, "Start this world, bitch!"

# Gets a message back from the Forman, "The world is here {id, host, port}"

# Saves {host, port} to Redis

# Signals subscribed Proxy connections that server is ready.
