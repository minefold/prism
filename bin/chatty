#!/usr/bin/env ruby

require 'bundler/setup'
Bundler.require :default, :chatty

$:.unshift File.join File.dirname(__FILE__), '../lib'
require 'environment'
require 'time'

abort "Usage: start-vm world_id" unless ARGV.length == 1
world_id = ARGV.shift
server_log = "#{WORLDS}/#{world_id}/server.log"

class LogLine
  attr_reader :line, :timestamp, :level, :message, :username, :chat_message

  def initialize line
    @line = line
    line =~ /(\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2})\s\[(\w+)\]\s(.*)/
    @timestamp = Time.parse $1
    @level = $2
    @message = $3

    message =~ /\<(\w+)\> (.*)/
    @usename = $1
    @chat_message = $2
  end
end

EM.run do
  puts "Mongo: #{ENV['MONGOHQ_URL']}"
  DB_CONNECTION = Mongo::Connection.from_uri(ENV['MONGOHQ_URL'])
  db_name = 'minefold'
  if DB_CONNECTION.auths.any?
    db_name = DB_CONNECTION.auths.first['db_name']
  end
  DB = DB_CONNECTION[db_name]

  users_collection = DB['users']
  wall_items_collection = DB['wall_items']

  EventMachine::file_tail server_log do |filetail, l|
    line = LogLine.new l
    if l.chat_user
      # TODO: WHAT IF THE USER DOESN'T EXIST?
      user = users_collection.find({'username' => l.chat_user}).first

      result = worlds_collection.insert(
        '_type' => 'ChatMessage',
        'message' => line.chat_message,
        'user_id' => user['_id'],
        'username' => line.username,
        'created_at' => line.timestamp,
        'updated_at' => line.timestamp
      )
      puts "[#{result}] #{line.timestamp} [#{line.username}] #{line.chat_message}"
    end
  end
end